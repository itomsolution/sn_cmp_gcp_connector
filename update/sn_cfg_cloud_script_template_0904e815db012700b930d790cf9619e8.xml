<?xml version="1.0" encoding="UTF-8"?><record_update table="sn_cfg_cloud_script_template">
    <sn_cfg_cloud_script_template action="INSERT_OR_UPDATE">
        <content># Copyright 2016 Google Inc. All rights reserved.&#13;
#&#13;
# Licensed under the Apache License, Version 2.0 (the "License");&#13;
# you may not use this file except in compliance with the License.&#13;
# You may obtain a copy of the License at&#13;
#&#13;
#     http://www.apache.org/licenses/LICENSE-2.0&#13;
#&#13;
# Unless required by applicable law or agreed to in writing, software&#13;
# distributed under the License is distributed on an "AS IS" BASIS,&#13;
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#13;
# See the License for the specific language governing permissions and&#13;
# limitations under the License.&#13;
&#13;
"""Creates a VM with user specified disks attached to it."""&#13;
&#13;
COMPUTE_URL_BASE = 'https://www.googleapis.com/compute/v1/'&#13;
&#13;
&#13;
def DiskName(context, diskobj):&#13;
  return context.env['deployment'] + '-disk-' + diskobj['name']&#13;
&#13;
&#13;
def GenerateConfig(context):&#13;
  """Creates configuration."""&#13;
&#13;
  resources = []&#13;
  project = context.env['project']&#13;
&#13;
  # create disks resources&#13;
  for disk_obj in context.properties['disks']:&#13;
    resources.append({'name': DiskName(context, disk_obj),&#13;
                      'type': 'compute.v1.disk',&#13;
                      'properties': {&#13;
                          'zone': context.properties['zone'],&#13;
                          'sizeGb': str(disk_obj['sizeGb']),&#13;
                          'type': ''.join([COMPUTE_URL_BASE,&#13;
                                           'projects/', project, '/zones/',&#13;
                                           context.properties['zone'],&#13;
                                           '/diskTypes/', disk_obj['diskType']])&#13;
                      }&#13;
                     })&#13;
  disks = []&#13;
  disks.append({'deviceName': 'boot',&#13;
                'type': 'PERSISTENT',&#13;
                'boot': True,&#13;
                'autoDelete': True,&#13;
                'initializeParams': {&#13;
                    'diskName': project + '-boot',&#13;
                    'sourceImage': ''.join([COMPUTE_URL_BASE, 'projects/',&#13;
                                            'debian-cloud/global/images/',&#13;
                                            'family/debian-9'])&#13;
                }&#13;
               })&#13;
  for disk_obj in context.properties['disks']:&#13;
    disks.append({'deviceName': DiskName(context, disk_obj),&#13;
                  'type': 'PERSISTENT',&#13;
                  'source': ''.join(['$(ref.', DiskName(context, disk_obj),&#13;
                                     '.selfLink)']),&#13;
                  'autoDelete': True})&#13;
&#13;
  # create vm with disks&#13;
  resources.append({'name': context.env['deployment'] + '-vm',&#13;
                    'type': 'compute.v1.instance',&#13;
                    'properties': {&#13;
                        'zone': context.properties['zone'],&#13;
                        'machineType': ''.join([COMPUTE_URL_BASE, 'projects/',&#13;
                                                project, '/zones/',&#13;
                                                context.properties['zone'],&#13;
                                                '/machineTypes/f1-micro']),&#13;
                        'networkInterfaces': [{&#13;
                            'network': ''.join([COMPUTE_URL_BASE,&#13;
                                                'projects/', project,&#13;
                                                '/global/networks/default']),&#13;
                            'accessConfigs': [{&#13;
                                'name': 'External NAT',&#13;
                                'type': 'ONE_TO_ONE_NAT'}],&#13;
                        }],&#13;
                        'disks': disks&#13;
                    }&#13;
                   })&#13;
  return {'resources': resources}</content>
        <name>vm_with_disks.py</name>
        <sys_class_name>sn_cfg_cloud_script_template</sys_class_name>
        <sys_created_by>jayant.kaushal</sys_created_by>
        <sys_created_on>2018-10-08 11:29:20</sys_created_on>
        <sys_id>0904e815db012700b930d790cf9619e8</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>vm_with_disks.py</sys_name>
        <sys_package display_value="Google Cloud Management" source="sn_cmp_gcp">40ff1aee0b2023003246ad4363673ac5</sys_package>
        <sys_policy/>
        <sys_scope display_value="Google Cloud Management">40ff1aee0b2023003246ad4363673ac5</sys_scope>
        <sys_update_name>sn_cfg_cloud_script_template_0904e815db012700b930d790cf9619e8</sys_update_name>
        <sys_updated_by>jayant.kaushal</sys_updated_by>
        <sys_updated_on>2018-10-08 11:29:20</sys_updated_on>
    </sn_cfg_cloud_script_template>
</record_update>
